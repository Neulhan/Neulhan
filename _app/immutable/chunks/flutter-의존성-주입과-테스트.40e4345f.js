import{s as pe,y as qn,z as Ut,n as le}from"./scheduler.1916e345.js";import{S as ce,i as oe,r as Rs,u as Bs,v as Ls,d as Hs,t as Ts,w as $s,g as e,s as l,H as r,h as p,x as o,c,j as i,f as a,C as m,k as f,a as t}from"./index.5c9dac44.js";import{M as ue,g as ke,a as Gt}from"./mdsvex.218628b2.js";import{I as Sn}from"./img.e58421d2.js";function ie(bs){let u,v="들어가며",_,C,k="개인 프로젝트에서 플러터를 사용중인데 의존성 주입을 적용해볼 일이 생겼다.",d,g,zn="백엔드를 지금은 FireStore 를 쓰고 있는데, 나중에 직접 백엔드 서버를 구축할 예정이다.",As,Ps,w,Ms,b,Un="이런 상황에서 잘못하면 코드가 덕지덕지 붙어서 껌딱지처럼 떼어내기가 어려워진다.",Is,P,Gn="이럴 때 필요한게 의존성 주입을 통한 느슨한 연결.",js,x,On="서버와 연결되는 부분을 <strong>인터페이스를 통해서 정의</strong>해두고, 필요에 맞게 인터페이스에 맞는 구현체를 <strong>의존성 주입을 통해 사용</strong>하면 나중에 간단하게 백엔드 교체가 가능하다.",Fs,Ds,Ss,qs,zs,E,Wn="Interface",Us,y,Kn="<li>먼저 필요한 기능들을 인터페이스로 만든다.</li> <li>아직은 CRUD 만 존재한다</li>",Gs,R,Os,Wt=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">interface</span> <span class="token keyword">class</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">CapsulePackageData</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getCapsulePackageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CapsulePackageData</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>
      <span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageId</span> packageId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">createCapsulePackage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageData</span> package<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">deleteCapsulePackage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageId</span> packageId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">updateCapsulePackage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageData</span> package<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ws,Ks,Ns,B,Nn="Implement",Js,L,Jn="<li>그리고 해당 인터페이스를 구현한 repository 구현체를 만든다.</li> <li>현재는 <code>FireStore</code> 를 사용중이기 때문에 <code>FireStoreCapsulePackageRepo</code> 로 구현</li>",Qs,xs,H,Vs,Xs,Ys,T,Qn="Injectable",Zs,$,Vn=`이제 의존성 주입을 해보자.<br/>
의존성 주입을 쉽게 할 수 있도록 도와주는 <strong><code>Injectable</code></strong> 이라는 라이브러리가 있다.<br/>
좋아요 1,000개짜리라 거의 공식 라이브러리라고 할 수 있다.`,hs,Es,A,sa,aa,na,M,Xn="공식문서에 나와있는대로 설치를 해주고,",ta,I,ea,Kt=`<code class="language-yaml"><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>
    <span class="token comment"># add injectable to your dependencies</span>
    <span class="token key atrule">injectable</span><span class="token punctuation">:</span>
    <span class="token comment"># add get_it</span>
    <span class="token key atrule">get_it</span><span class="token punctuation">:</span>

<span class="token key atrule">dev_dependencies</span><span class="token punctuation">:</span>
    <span class="token comment"># add the generator to your dev_dependencies</span>
    <span class="token key atrule">injectable_generator</span><span class="token punctuation">:</span>
    <span class="token comment"># add build runner if not already added</span>
    build_runner<span class="token punctuation">:</span></code>`,pa,la,ca,j,Yn="<code>lib/injectable.dart</code> 에 아래 코드를 적어주고",oa,F,ua,Nt=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:get_it/get_it.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">final</span> getIt <span class="token operator">=</span> <span class="token class-name">GetIt</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>

<span class="token metadata function">@InjectableInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">configureDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> getIt<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ka,ia,ra,D,Zn="빌드 러너도 돌려주고",ma,S,fa,Jt='<code class="language-shell">flutter pub run build_runner build</code>',da,Ca,_a,q,hn="<code>lib/main.dart</code> 에 <code>configureDependencies</code> 를 해주면 기본 준비는 끝",ga,z,va,Qt=`<code class="language-dart"><span class="token comment">// ...</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">configureDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,wa,ba,Pa,xa,Ea,U,st="의존성 주입 사용하기",ya,G,at="다음과 같이 <code>FireStoreCapsulePackageRepo</code> 를 <code>CapsulePackageRepo</code> 로서 사용한다고 써준다.",Ra,O,Ba,Vt=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/app/repos/interfaces.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token comment">// 여기</span>
<span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsulePackageRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span></code>`,La,Ha,Ta,W,nt="이렇게 의존성이 주입되면 아래와 같이 <code>FireStoreCapsuleRepo</code> 를 코드에서 직접 언급하지 않아도 된다.<br/> <code>CapsuleRepo</code> 인터페이스의 구현체로 <code>FireStoreCapsuleRepo</code> 를 쓰겠다고 써놨기 때문에 <code>getIt</code> 을 통해 초기화 하면 <code>FireStoreCapsuleRepo</code> 가 사용되는 것이다.",$a,K,Aa,Xt=`<code class="language-dart"><span class="token comment">// 의존성 주입 하기 전</span>
<span class="token keyword">final</span> repo <span class="token operator">=</span> <span class="token class-name">FireStoreCapsuleRepo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 의존성 주입 후</span>
<span class="token keyword">final</span> <span class="token class-name">CapsuleRepo</span> repo <span class="token operator">=</span> <span class="token function">getIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ma,Ia,ja,N,tt="나중에 백엔드가 바뀔 때 <code>@Injectable</code> 코드만 옮겨주면 사용처의 코드를 변경하지 않고도 일괄 변경이 가능하다.",Fa,J,Da,Yt=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/app/repos/interfaces.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

<span class="token comment">// 여기</span>
<span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsulePackageRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FastAPICapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span></code>`,Sa,qa,za,Ua,Ga,Q,et="테스트",Oa,V,pt="이게 끝이 아니다. 느슨한 연결의 진짜 장점 중 하나는 <strong>테스트 구현이 쉬워진다는 것</strong>. 내친김에 테스트까지 작성해보자.",Wa,X,lt="<code>test/repo/capsule_package_repo_test.dart</code> 를 만들어서 테스트 구현을 시작한다.",Ka,Y,Na,Zt=`<code class="language-dart"><span class="token comment">// test/repo/capsule_package_repo_test.dart</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">TestWidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// environment 를 test 로 설정</span>
  globals<span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">globals<span class="token punctuation">.</span></span>EnvironmentEnum</span><span class="token punctuation">.</span>test<span class="token punctuation">;</span>
  <span class="token comment">// Injectable config</span>
  <span class="token function">configureDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Test 에서 사용할 State</span>
  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CapsulePackageData</span><span class="token punctuation">></span></span> createdPackageList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// Repo 를 초기화</span>
  late <span class="token keyword">final</span> <span class="token class-name">CapsulePackageRepo</span> capsulePackageRepo <span class="token operator">=</span> <span class="token function">getIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span></code>`,Ja,Z,ct="<code>environment</code> 를 test 로 설정한다.",Qa,h,ot="test 로 설정되면 <code>FireStoreCapsulePackageRepo</code> 가 내부적으로 <code>FakeFireStore</code> 를 사용하도록 구현해놨다.",Va,ss,ut="나중에 다른 백엔드의 레포지토리를 구현할 때에도, 생성자 내부에서 환경에 따라 다른 client 를 사용하도록 할 수 있을 것이다.",Xa,as,Ya,ht=`<code class="language-dart"><span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsuleRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsuleRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsuleRepo</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> <span class="token class-name">FirebaseFirestore</span> instance<span class="token punctuation">;</span>

  <span class="token class-name">FireStoreCapsuleRepo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> instance <span class="token operator">=</span> globals<span class="token punctuation">.</span>environment <span class="token operator">==</span> <span class="token class-name"><span class="token namespace">globals<span class="token punctuation">.</span></span>EnvironmentEnum</span><span class="token punctuation">.</span>prod
            <span class="token operator">?</span> <span class="token class-name">FirebaseFirestore</span><span class="token punctuation">.</span>instance
            <span class="token punctuation">:</span> <span class="token class-name">FakeFirebaseFirestore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`,Za,ha,sn,ns,kt="create repo 테스트",an,ts,nn,se=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'createCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> package <span class="token operator">=</span> <span class="token class-name">CapsulePackageData</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
      name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"TEST PACKAGE"</span></span><span class="token punctuation">,</span>
      description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"DESCRIPTION"</span></span><span class="token punctuation">,</span>
      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">,</span>
      userId<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"TEST USER"</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">createCapsulePackage</span><span class="token punctuation">(</span>package<span class="token punctuation">:</span> package<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span>
        <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>packageId<span class="token punctuation">:</span> package<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> package<span class="token punctuation">)</span><span class="token punctuation">;</span>
    createdPackageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>package<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
</code>`,tn,en,pn,es,it="다른 메서드 구현도 테스트한다.",ln,ps,cn,ae=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'getCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> first <span class="token operator">=</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span>
        <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>packageId<span class="token punctuation">:</span> first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'getCapsulePackageList'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>createdPackageList<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'deleteCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">deleteCapsulePackage</span><span class="token punctuation">(</span>
        packageId<span class="token punctuation">:</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    createdPackageList
        <span class="token punctuation">.</span><span class="token function">removeWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>package<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> package<span class="token punctuation">.</span>id <span class="token operator">==</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>createdPackageList<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code>`,on,un,kn,rn,ls,rt="이렇게 테스트를 구성하면 나중에 다른 Repository 를 변경해도 테스트 코드를 수정하지 않아도 된다.",mn,cs,mt="나중에 아래와 같이 Injectable 에서 어떤 구현체를 쓸지만 바꿔주면 <strong>새 구현체가 잘 작성되었는지 테스트</strong>도 자동으로 가능하다.",fn,os,dn,ne=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/app/repos/interfaces.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

<span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsulePackageRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FastAPICapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span></code>`,Cn,_n,gn,vn,wn,us,ft="Eqautable",bn,ks,dt=`잊을 뻔 했는데 방금 작성된 테스트가 가능하게 해준건 <code>Equatable</code> 이라는 패키지 덕분이다.
dart 에서는 equal 메서드와 hashcode 메서드를 간단하게 만들기가 어렵다.`,Pn,is,Ct="이 패키지도 like 가 2,700개 가까이 되는 근본 패키지이다.",xn,ys,rs,En,ms,_t="사용법",yn,fs,gt="모델로 사용하고 있는 클래스가 <code>Equatable</code> 을 상속받도록 한 다음 <code>props</code> 를 오버라이딩 해주면된다.",Rn,ds,vt="<code>props</code> 에 적힌 프로퍼티를 가지고 hashcode 를 만들기 때문에, 여기 적힌 프로퍼티들의 값만 동일하면 나중에 비교할 때 같은 객체로 취급된다.",Bn,Cs,Ln,te=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CapsulePackageData</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> description<span class="token punctuation">,</span> createdAt<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Hn,_s,wt="그럼 아래처럼 객체간 비교가 가능하게 해줘서 테스트 코드를 작성하기가 매우 편해진다.",Tn,gs,$n,ee=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'getCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">CapsulePackageData</span> first <span class="token operator">=</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">CapsulePackageData</span> result <span class="token operator">=</span>
        <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>packageId<span class="token punctuation">:</span> first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// CapsulePackageData 끼리의 비교</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>
</code>`,An,Mn,In,jn,vs,bt="마무리",Fn,ws,Pt="끝!",Dn;return w=new Sn({props:{src:"https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-04-13-57.png.webp",alt:"flutter 의존성 주입"}}),H=new Sn({props:{src:"https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-01-37-25.png.webp",alt:"flutter implements"}}),A=new Sn({props:{src:"https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-02-27-06.png.webp",alt:"Injectable"}}),rs=new Sn({props:{src:"https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-23-53-23.png.webp",alt:"equatable"}}),{c(){u=e("h1"),u.textContent=v,_=l(),C=e("p"),C.textContent=k,d=l(),g=e("p"),g.textContent=zn,As=l(),Ps=e("p"),Rs(w.$$.fragment),Ms=l(),b=e("p"),b.textContent=Un,Is=l(),P=e("p"),P.textContent=Gn,js=l(),x=e("p"),x.innerHTML=On,Fs=l(),Ds=e("br"),Ss=l(),qs=e("br"),zs=l(),E=e("h1"),E.textContent=Wn,Us=l(),y=e("ul"),y.innerHTML=Kn,Gs=l(),R=e("pre"),Os=new r(!1),Ws=l(),Ks=e("br"),Ns=l(),B=e("h1"),B.textContent=Nn,Js=l(),L=e("ul"),L.innerHTML=Jn,Qs=l(),xs=e("p"),Rs(H.$$.fragment),Vs=l(),Xs=e("br"),Ys=l(),T=e("h1"),T.textContent=Qn,Zs=l(),$=e("p"),$.innerHTML=Vn,hs=l(),Es=e("p"),Rs(A.$$.fragment),sa=l(),aa=e("br"),na=l(),M=e("p"),M.textContent=Xn,ta=l(),I=e("pre"),ea=new r(!1),pa=l(),la=e("br"),ca=l(),j=e("p"),j.innerHTML=Yn,oa=l(),F=e("pre"),ua=new r(!1),ka=l(),ia=e("br"),ra=l(),D=e("p"),D.textContent=Zn,ma=l(),S=e("pre"),fa=new r(!1),da=l(),Ca=e("br"),_a=l(),q=e("p"),q.innerHTML=hn,ga=l(),z=e("pre"),va=new r(!1),wa=l(),ba=e("br"),Pa=l(),xa=e("br"),Ea=l(),U=e("h1"),U.textContent=st,ya=l(),G=e("p"),G.innerHTML=at,Ra=l(),O=e("pre"),Ba=new r(!1),La=l(),Ha=e("br"),Ta=l(),W=e("p"),W.innerHTML=nt,$a=l(),K=e("pre"),Aa=new r(!1),Ma=l(),Ia=e("br"),ja=l(),N=e("p"),N.innerHTML=tt,Fa=l(),J=e("pre"),Da=new r(!1),Sa=l(),qa=e("br"),za=l(),Ua=e("br"),Ga=l(),Q=e("h1"),Q.textContent=et,Oa=l(),V=e("p"),V.innerHTML=pt,Wa=l(),X=e("p"),X.innerHTML=lt,Ka=l(),Y=e("pre"),Na=new r(!1),Ja=l(),Z=e("p"),Z.innerHTML=ct,Qa=l(),h=e("p"),h.innerHTML=ot,Va=l(),ss=e("p"),ss.textContent=ut,Xa=l(),as=e("pre"),Ya=new r(!1),Za=l(),ha=e("br"),sn=l(),ns=e("p"),ns.textContent=kt,an=l(),ts=e("pre"),nn=new r(!1),tn=l(),en=e("br"),pn=l(),es=e("p"),es.textContent=it,ln=l(),ps=e("pre"),cn=new r(!1),on=l(),un=e("br"),kn=e("br"),rn=l(),ls=e("p"),ls.textContent=rt,mn=l(),cs=e("p"),cs.innerHTML=mt,fn=l(),os=e("pre"),dn=new r(!1),Cn=l(),_n=e("br"),gn=l(),vn=e("br"),wn=l(),us=e("h1"),us.textContent=ft,bn=l(),ks=e("p"),ks.innerHTML=dt,Pn=l(),is=e("p"),is.textContent=Ct,xn=l(),ys=e("p"),Rs(rs.$$.fragment),En=l(),ms=e("h3"),ms.textContent=_t,yn=l(),fs=e("p"),fs.innerHTML=gt,Rn=l(),ds=e("p"),ds.innerHTML=vt,Bn=l(),Cs=e("pre"),Ln=new r(!1),Hn=l(),_s=e("p"),_s.textContent=wt,Tn=l(),gs=e("pre"),$n=new r(!1),An=l(),Mn=e("br"),In=e("br"),jn=l(),vs=e("h1"),vs.textContent=bt,Fn=l(),ws=e("p"),ws.textContent=Pt,this.h()},l(s){u=p(s,"H1",{"data-svelte-h":!0}),o(u)!=="svelte-1ls67hg"&&(u.textContent=v),_=c(s),C=p(s,"P",{"data-svelte-h":!0}),o(C)!=="svelte-1ll0u1k"&&(C.textContent=k),d=c(s),g=p(s,"P",{"data-svelte-h":!0}),o(g)!=="svelte-1ihjguo"&&(g.textContent=zn),As=c(s),Ps=p(s,"P",{});var n=i(Ps);Bs(w.$$.fragment,n),n.forEach(a),Ms=c(s),b=p(s,"P",{"data-svelte-h":!0}),o(b)!=="svelte-1930b79"&&(b.textContent=Un),Is=c(s),P=p(s,"P",{"data-svelte-h":!0}),o(P)!=="svelte-1e2wguf"&&(P.textContent=Gn),js=c(s),x=p(s,"P",{"data-svelte-h":!0}),o(x)!=="svelte-1a19fkv"&&(x.innerHTML=On),Fs=c(s),Ds=p(s,"BR",{}),Ss=c(s),qs=p(s,"BR",{}),zs=c(s),E=p(s,"H1",{"data-svelte-h":!0}),o(E)!=="svelte-plwwnb"&&(E.textContent=Wn),Us=c(s),y=p(s,"UL",{"data-svelte-h":!0}),o(y)!=="svelte-zlb2nc"&&(y.innerHTML=Kn),Gs=c(s),R=p(s,"PRE",{class:!0});var xt=i(R);Os=m(xt,!1),xt.forEach(a),Ws=c(s),Ks=p(s,"BR",{}),Ns=c(s),B=p(s,"H1",{"data-svelte-h":!0}),o(B)!=="svelte-17cwu8d"&&(B.textContent=Nn),Js=c(s),L=p(s,"UL",{"data-svelte-h":!0}),o(L)!=="svelte-17kbztm"&&(L.innerHTML=Jn),Qs=c(s),xs=p(s,"P",{});var Et=i(xs);Bs(H.$$.fragment,Et),Et.forEach(a),Vs=c(s),Xs=p(s,"BR",{}),Ys=c(s),T=p(s,"H1",{"data-svelte-h":!0}),o(T)!=="svelte-1koqdv5"&&(T.textContent=Qn),Zs=c(s),$=p(s,"P",{"data-svelte-h":!0}),o($)!=="svelte-4q3vsv"&&($.innerHTML=Vn),hs=c(s),Es=p(s,"P",{});var yt=i(Es);Bs(A.$$.fragment,yt),yt.forEach(a),sa=c(s),aa=p(s,"BR",{}),na=c(s),M=p(s,"P",{"data-svelte-h":!0}),o(M)!=="svelte-1ttoaj2"&&(M.textContent=Xn),ta=c(s),I=p(s,"PRE",{class:!0});var Rt=i(I);ea=m(Rt,!1),Rt.forEach(a),pa=c(s),la=p(s,"BR",{}),ca=c(s),j=p(s,"P",{"data-svelte-h":!0}),o(j)!=="svelte-6g81k2"&&(j.innerHTML=Yn),oa=c(s),F=p(s,"PRE",{class:!0});var Bt=i(F);ua=m(Bt,!1),Bt.forEach(a),ka=c(s),ia=p(s,"BR",{}),ra=c(s),D=p(s,"P",{"data-svelte-h":!0}),o(D)!=="svelte-xyfrfw"&&(D.textContent=Zn),ma=c(s),S=p(s,"PRE",{class:!0});var Lt=i(S);fa=m(Lt,!1),Lt.forEach(a),da=c(s),Ca=p(s,"BR",{}),_a=c(s),q=p(s,"P",{"data-svelte-h":!0}),o(q)!=="svelte-1jkch5g"&&(q.innerHTML=hn),ga=c(s),z=p(s,"PRE",{class:!0});var Ht=i(z);va=m(Ht,!1),Ht.forEach(a),wa=c(s),ba=p(s,"BR",{}),Pa=c(s),xa=p(s,"BR",{}),Ea=c(s),U=p(s,"H1",{"data-svelte-h":!0}),o(U)!=="svelte-x0j9nd"&&(U.textContent=st),ya=c(s),G=p(s,"P",{"data-svelte-h":!0}),o(G)!=="svelte-17q4mqj"&&(G.innerHTML=at),Ra=c(s),O=p(s,"PRE",{class:!0});var Tt=i(O);Ba=m(Tt,!1),Tt.forEach(a),La=c(s),Ha=p(s,"BR",{}),Ta=c(s),W=p(s,"P",{"data-svelte-h":!0}),o(W)!=="svelte-1isdob5"&&(W.innerHTML=nt),$a=c(s),K=p(s,"PRE",{class:!0});var $t=i(K);Aa=m($t,!1),$t.forEach(a),Ma=c(s),Ia=p(s,"BR",{}),ja=c(s),N=p(s,"P",{"data-svelte-h":!0}),o(N)!=="svelte-l37uau"&&(N.innerHTML=tt),Fa=c(s),J=p(s,"PRE",{class:!0});var At=i(J);Da=m(At,!1),At.forEach(a),Sa=c(s),qa=p(s,"BR",{}),za=c(s),Ua=p(s,"BR",{}),Ga=c(s),Q=p(s,"H1",{"data-svelte-h":!0}),o(Q)!=="svelte-15fyrui"&&(Q.textContent=et),Oa=c(s),V=p(s,"P",{"data-svelte-h":!0}),o(V)!=="svelte-1twbz3z"&&(V.innerHTML=pt),Wa=c(s),X=p(s,"P",{"data-svelte-h":!0}),o(X)!=="svelte-1lofsth"&&(X.innerHTML=lt),Ka=c(s),Y=p(s,"PRE",{class:!0});var Mt=i(Y);Na=m(Mt,!1),Mt.forEach(a),Ja=c(s),Z=p(s,"P",{"data-svelte-h":!0}),o(Z)!=="svelte-16fyypr"&&(Z.innerHTML=ct),Qa=c(s),h=p(s,"P",{"data-svelte-h":!0}),o(h)!=="svelte-cpq2oi"&&(h.innerHTML=ot),Va=c(s),ss=p(s,"P",{"data-svelte-h":!0}),o(ss)!=="svelte-fbtxzx"&&(ss.textContent=ut),Xa=c(s),as=p(s,"PRE",{class:!0});var It=i(as);Ya=m(It,!1),It.forEach(a),Za=c(s),ha=p(s,"BR",{}),sn=c(s),ns=p(s,"P",{"data-svelte-h":!0}),o(ns)!=="svelte-1m5d6c0"&&(ns.textContent=kt),an=c(s),ts=p(s,"PRE",{class:!0});var jt=i(ts);nn=m(jt,!1),jt.forEach(a),tn=c(s),en=p(s,"BR",{}),pn=c(s),es=p(s,"P",{"data-svelte-h":!0}),o(es)!=="svelte-vut832"&&(es.textContent=it),ln=c(s),ps=p(s,"PRE",{class:!0});var Ft=i(ps);cn=m(Ft,!1),Ft.forEach(a),on=c(s),un=p(s,"BR",{}),kn=p(s,"BR",{}),rn=c(s),ls=p(s,"P",{"data-svelte-h":!0}),o(ls)!=="svelte-1v187jn"&&(ls.textContent=rt),mn=c(s),cs=p(s,"P",{"data-svelte-h":!0}),o(cs)!=="svelte-89vxm8"&&(cs.innerHTML=mt),fn=c(s),os=p(s,"PRE",{class:!0});var Dt=i(os);dn=m(Dt,!1),Dt.forEach(a),Cn=c(s),_n=p(s,"BR",{}),gn=c(s),vn=p(s,"BR",{}),wn=c(s),us=p(s,"H1",{"data-svelte-h":!0}),o(us)!=="svelte-1e19bhm"&&(us.textContent=ft),bn=c(s),ks=p(s,"P",{"data-svelte-h":!0}),o(ks)!=="svelte-15pwcl7"&&(ks.innerHTML=dt),Pn=c(s),is=p(s,"P",{"data-svelte-h":!0}),o(is)!=="svelte-lukxb6"&&(is.textContent=Ct),xn=c(s),ys=p(s,"P",{});var St=i(ys);Bs(rs.$$.fragment,St),St.forEach(a),En=c(s),ms=p(s,"H3",{"data-svelte-h":!0}),o(ms)!=="svelte-16a04nc"&&(ms.textContent=_t),yn=c(s),fs=p(s,"P",{"data-svelte-h":!0}),o(fs)!=="svelte-h5tz3i"&&(fs.innerHTML=gt),Rn=c(s),ds=p(s,"P",{"data-svelte-h":!0}),o(ds)!=="svelte-dppyiz"&&(ds.innerHTML=vt),Bn=c(s),Cs=p(s,"PRE",{class:!0});var qt=i(Cs);Ln=m(qt,!1),qt.forEach(a),Hn=c(s),_s=p(s,"P",{"data-svelte-h":!0}),o(_s)!=="svelte-i3n2qq"&&(_s.textContent=wt),Tn=c(s),gs=p(s,"PRE",{class:!0});var zt=i(gs);$n=m(zt,!1),zt.forEach(a),An=c(s),Mn=p(s,"BR",{}),In=p(s,"BR",{}),jn=c(s),vs=p(s,"H1",{"data-svelte-h":!0}),o(vs)!=="svelte-1hmxnju"&&(vs.textContent=bt),Fn=c(s),ws=p(s,"P",{"data-svelte-h":!0}),o(ws)!=="svelte-w28h4e"&&(ws.textContent=Pt),this.h()},h(){Os.a=null,f(R,"class","language-dart"),ea.a=null,f(I,"class","language-yaml"),ua.a=null,f(F,"class","language-dart"),fa.a=null,f(S,"class","language-shell"),va.a=null,f(z,"class","language-dart"),Ba.a=null,f(O,"class","language-dart"),Aa.a=null,f(K,"class","language-dart"),Da.a=null,f(J,"class","language-dart"),Na.a=null,f(Y,"class","language-dart"),Ya.a=null,f(as,"class","language-dart"),nn.a=null,f(ts,"class","language-dart"),cn.a=null,f(ps,"class","language-dart"),dn.a=null,f(os,"class","language-dart"),Ln.a=null,f(Cs,"class","language-dart"),$n.a=null,f(gs,"class","language-dart")},m(s,n){t(s,u,n),t(s,_,n),t(s,C,n),t(s,d,n),t(s,g,n),t(s,As,n),t(s,Ps,n),Ls(w,Ps,null),t(s,Ms,n),t(s,b,n),t(s,Is,n),t(s,P,n),t(s,js,n),t(s,x,n),t(s,Fs,n),t(s,Ds,n),t(s,Ss,n),t(s,qs,n),t(s,zs,n),t(s,E,n),t(s,Us,n),t(s,y,n),t(s,Gs,n),t(s,R,n),Os.m(Wt,R),t(s,Ws,n),t(s,Ks,n),t(s,Ns,n),t(s,B,n),t(s,Js,n),t(s,L,n),t(s,Qs,n),t(s,xs,n),Ls(H,xs,null),t(s,Vs,n),t(s,Xs,n),t(s,Ys,n),t(s,T,n),t(s,Zs,n),t(s,$,n),t(s,hs,n),t(s,Es,n),Ls(A,Es,null),t(s,sa,n),t(s,aa,n),t(s,na,n),t(s,M,n),t(s,ta,n),t(s,I,n),ea.m(Kt,I),t(s,pa,n),t(s,la,n),t(s,ca,n),t(s,j,n),t(s,oa,n),t(s,F,n),ua.m(Nt,F),t(s,ka,n),t(s,ia,n),t(s,ra,n),t(s,D,n),t(s,ma,n),t(s,S,n),fa.m(Jt,S),t(s,da,n),t(s,Ca,n),t(s,_a,n),t(s,q,n),t(s,ga,n),t(s,z,n),va.m(Qt,z),t(s,wa,n),t(s,ba,n),t(s,Pa,n),t(s,xa,n),t(s,Ea,n),t(s,U,n),t(s,ya,n),t(s,G,n),t(s,Ra,n),t(s,O,n),Ba.m(Vt,O),t(s,La,n),t(s,Ha,n),t(s,Ta,n),t(s,W,n),t(s,$a,n),t(s,K,n),Aa.m(Xt,K),t(s,Ma,n),t(s,Ia,n),t(s,ja,n),t(s,N,n),t(s,Fa,n),t(s,J,n),Da.m(Yt,J),t(s,Sa,n),t(s,qa,n),t(s,za,n),t(s,Ua,n),t(s,Ga,n),t(s,Q,n),t(s,Oa,n),t(s,V,n),t(s,Wa,n),t(s,X,n),t(s,Ka,n),t(s,Y,n),Na.m(Zt,Y),t(s,Ja,n),t(s,Z,n),t(s,Qa,n),t(s,h,n),t(s,Va,n),t(s,ss,n),t(s,Xa,n),t(s,as,n),Ya.m(ht,as),t(s,Za,n),t(s,ha,n),t(s,sn,n),t(s,ns,n),t(s,an,n),t(s,ts,n),nn.m(se,ts),t(s,tn,n),t(s,en,n),t(s,pn,n),t(s,es,n),t(s,ln,n),t(s,ps,n),cn.m(ae,ps),t(s,on,n),t(s,un,n),t(s,kn,n),t(s,rn,n),t(s,ls,n),t(s,mn,n),t(s,cs,n),t(s,fn,n),t(s,os,n),dn.m(ne,os),t(s,Cn,n),t(s,_n,n),t(s,gn,n),t(s,vn,n),t(s,wn,n),t(s,us,n),t(s,bn,n),t(s,ks,n),t(s,Pn,n),t(s,is,n),t(s,xn,n),t(s,ys,n),Ls(rs,ys,null),t(s,En,n),t(s,ms,n),t(s,yn,n),t(s,fs,n),t(s,Rn,n),t(s,ds,n),t(s,Bn,n),t(s,Cs,n),Ln.m(te,Cs),t(s,Hn,n),t(s,_s,n),t(s,Tn,n),t(s,gs,n),$n.m(ee,gs),t(s,An,n),t(s,Mn,n),t(s,In,n),t(s,jn,n),t(s,vs,n),t(s,Fn,n),t(s,ws,n),Dn=!0},p:le,i(s){Dn||(Hs(w.$$.fragment,s),Hs(H.$$.fragment,s),Hs(A.$$.fragment,s),Hs(rs.$$.fragment,s),Dn=!0)},o(s){Ts(w.$$.fragment,s),Ts(H.$$.fragment,s),Ts(A.$$.fragment,s),Ts(rs.$$.fragment,s),Dn=!1},d(s){s&&(a(u),a(_),a(C),a(d),a(g),a(As),a(Ps),a(Ms),a(b),a(Is),a(P),a(js),a(x),a(Fs),a(Ds),a(Ss),a(qs),a(zs),a(E),a(Us),a(y),a(Gs),a(R),a(Ws),a(Ks),a(Ns),a(B),a(Js),a(L),a(Qs),a(xs),a(Vs),a(Xs),a(Ys),a(T),a(Zs),a($),a(hs),a(Es),a(sa),a(aa),a(na),a(M),a(ta),a(I),a(pa),a(la),a(ca),a(j),a(oa),a(F),a(ka),a(ia),a(ra),a(D),a(ma),a(S),a(da),a(Ca),a(_a),a(q),a(ga),a(z),a(wa),a(ba),a(Pa),a(xa),a(Ea),a(U),a(ya),a(G),a(Ra),a(O),a(La),a(Ha),a(Ta),a(W),a($a),a(K),a(Ma),a(Ia),a(ja),a(N),a(Fa),a(J),a(Sa),a(qa),a(za),a(Ua),a(Ga),a(Q),a(Oa),a(V),a(Wa),a(X),a(Ka),a(Y),a(Ja),a(Z),a(Qa),a(h),a(Va),a(ss),a(Xa),a(as),a(Za),a(ha),a(sn),a(ns),a(an),a(ts),a(tn),a(en),a(pn),a(es),a(ln),a(ps),a(on),a(un),a(kn),a(rn),a(ls),a(mn),a(cs),a(fn),a(os),a(Cn),a(_n),a(gn),a(vn),a(wn),a(us),a(bn),a(ks),a(Pn),a(is),a(xn),a(ys),a(En),a(ms),a(yn),a(fs),a(Rn),a(ds),a(Bn),a(Cs),a(Hn),a(_s),a(Tn),a(gs),a(An),a(Mn),a(In),a(jn),a(vs),a(Fn),a(ws)),$s(w),$s(H),$s(A),$s(rs)}}}function re(bs){let u,v;const _=[bs[0],Ot];let C={$$slots:{default:[ie]},$$scope:{ctx:bs}};for(let k=0;k<_.length;k+=1)C=qn(C,_[k]);return u=new ue({props:C}),{c(){Rs(u.$$.fragment)},l(k){Bs(u.$$.fragment,k)},m(k,d){Ls(u,k,d),v=!0},p(k,[d]){const g=d&1?ke(_,[d&1&&Gt(k[0]),d&0&&Gt(Ot)]):{};d&2&&(g.$$scope={dirty:d,ctx:k}),u.$set(g)},i(k){v||(Hs(u.$$.fragment,k),v=!0)},o(k){Ts(u.$$.fragment,k),v=!1},d(k){$s(u,k)}}}const Ot={emoji:"🧪",title:"Flutter 의존성 주입과 테스트",description:"개인 프로젝트에서 Flutter 로 clean 함을 적용해볼 일이 생겼다. 일단 백엔드 없이 FireStore 만 써서 진행중인데, 나중에 백엔드 확장이 될 것 같다. 먼저 필요한 기능들을 인터페이스로 만든다.",date:"2023-11-20",categories:["flutter","dart"],published:!0,thumbnail:"https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-의존성-주입과-테스트/2023-11-19-04-13-57.png.webp"};function me(bs,u,v){return bs.$$set=_=>{v(0,u=qn(qn({},u),Ut(_)))},u=Ut(u),[u]}class ge extends ce{constructor(u){super(),oe(this,u,me,re,pe,{})}}export{ge as default,Ot as metadata};
