import{s as Kt,n as En}from"./scheduler.7c4769d9.js";import{S as Nt,i as Jt,g as e,s as l,H as u,h as p,x as o,c,j as k,C as i,f as a,k as r,a as t}from"./index.cc557082.js";function Qt(Ht){let m,yn="들어가며",vs,C,Rn="개인 프로젝트에서 플러터를 사용중인데 의존성 주입을 적용해볼 일이 생겼다.",_s,d,Ln="백엔드를 지금은 FireStore 를 쓰고 있는데, 나중에 직접 백엔드 서버를 구축할 예정이다.",gs,f,Hn='<img src="https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-04-13-57.png" alt="flutter 의존성 주입"/>',ws,v,Bn="이런 상황에서 잘못하면 코드가 덕지덕지 붙어서 껌딱지처럼 떼어내기가 어려워진다.",Ps,_,Tn="이럴 때 필요한게 의존성 주입을 통한 느슨한 연결.",bs,g,Mn="서버와 연결되는 부분을 <strong>인터페이스를 통해서 정의</strong>해두고, 필요에 맞게 인터페이스에 맞는 구현체를 <strong>의존성 주입을 통해 사용</strong>하면 나중에 간단하게 백엔드 교체가 가능하다.",xs,Es,ys,Rs,Ls,w,An="Interface",Hs,P,Fn="<li>먼저 필요한 기능들을 인터페이스로 만든다.</li> <li>아직은 CRUD 만 존재한다</li>",Bs,b,Ts,Bt=`<code class="language-dart"><span class="token keyword">abstract</span> <span class="token keyword">interface</span> <span class="token keyword">class</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">CapsulePackageData</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getCapsulePackageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CapsulePackageData</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>
      <span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageId</span> packageId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">createCapsulePackage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageData</span> package<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">deleteCapsulePackage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageId</span> packageId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">></span></span> <span class="token function">updateCapsulePackage</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token class-name">CapsulePackageData</span> package<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ms,As,Fs,x,In="Implement",Is,E,jn="<li>그리고 해당 인터페이스를 구현한 repository 구현체를 만든다.</li> <li>현재는 <code>FireStore</code> 를 사용중이기 때문에 <code>FireStoreCapsulePackageRepo</code> 로 구현</li>",js,y,Dn='<img src="https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-01-37-25.png" alt="flutter implements"/>',Ds,qs,Ss,R,qn="Injectable",zs,L,Sn=`이제 의존성 주입을 해보자.<br/>
의존성 주입을 쉽게 할 수 있도록 도와주는 <strong><code>Injectable</code></strong> 이라는 라이브러리가 있다.<br/>
좋아요 1,000개짜리라 거의 공식 라이브러리라고 할 수 있다.`,Us,H,zn='<img src="https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-02-27-06.png" alt="Injectable"/>',Gs,Os,Ws,B,Un="공식문서에 나와있는대로 설치를 해주고,",Ks,T,Ns,Tt=`<code class="language-yaml"><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>  
  <span class="token comment"># add injectable to your dependencies  </span>
  <span class="token key atrule">injectable</span><span class="token punctuation">:</span>  
  <span class="token comment"># add get_it  </span>
  <span class="token key atrule">get_it</span><span class="token punctuation">:</span>  
  
<span class="token key atrule">dev_dependencies</span><span class="token punctuation">:</span>  
  <span class="token comment"># add the generator to your dev_dependencies  </span>
  <span class="token key atrule">injectable_generator</span><span class="token punctuation">:</span>  
  <span class="token comment"># add build runner if not already added  </span>
  build_runner<span class="token punctuation">:</span></code>`,Js,Qs,Vs,M,Gn="<code>lib/injectable.dart</code> 에 아래 코드를 적어주고",Xs,A,Ys,Mt=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:get_it/get_it.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">final</span> getIt <span class="token operator">=</span> <span class="token class-name">GetIt</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
 
<span class="token metadata function">@InjectableInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">configureDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> getIt<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Zs,$s,hs,F,On="빌드 러너도 돌려주고",sa,I,aa,At='<code class="language-shell">flutter pub run build_runner build</code>',na,ta,ea,j,Wn="<code>lib/main.dart</code> 에 <code>configureDependencies</code> 를 해주면 기본 준비는 끝",pa,D,la,Ft=`<code class="language-dart"><span class="token comment">// ...</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  
 <span class="token function">configureDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

 <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span></code>`,ca,oa,ua,ka,ia,q,Kn="의존성 주입 사용하기",ra,S,Nn="다음과 같이 <code>FireStoreCapsulePackageRepo</code> 를 <code>CapsulePackageRepo</code> 로서 사용한다고 써준다.",ma,z,Ca,It=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/app/repos/interfaces.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token comment">// 여기</span>
<span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsulePackageRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span></code>`,da,fa,va,U,Jn="이렇게 의존성이 주입되면 아래와 같이 <code>FireStoreCapsuleRepo</code> 를 코드에서 직접 언급하지 않아도 된다.<br/> <code>CapsuleRepo</code> 인터페이스의 구현체로 <code>FireStoreCapsuleRepo</code> 를 쓰겠다고 써놨기 때문에 <code>getIt</code> 을 통해 초기화 하면 <code>FireStoreCapsuleRepo</code> 가 사용되는 것이다.",_a,G,ga,jt=`<code class="language-dart"><span class="token comment">// 의존성 주입 하기 전</span>
<span class="token keyword">final</span> repo <span class="token operator">=</span> <span class="token class-name">FireStoreCapsuleRepo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 의존성 주입 후</span>
<span class="token keyword">final</span> <span class="token class-name">CapsuleRepo</span> repo <span class="token operator">=</span> <span class="token function">getIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,wa,Pa,ba,O,Qn="나중에 백엔드가 바뀔 때 <code>@Injectable</code> 코드만 옮겨주면 사용처의 코드를 변경하지 않고도 일괄 변경이 가능하다.",xa,W,Ea,Dt=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/app/repos/interfaces.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

<span class="token comment">// 여기</span>
<span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsulePackageRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FastAPICapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span></code>`,ya,Ra,La,Ha,Ba,K,Vn="테스트",Ta,N,Xn="이게 끝이 아니다. 느슨한 연결의 진짜 장점 중 하나는 <strong>테스트 구현이 쉬워진다는 것</strong>. 내친김에 테스트까지 작성해보자.",Ma,J,Yn="<code>test/repo/capsule_package_repo_test.dart</code> 를 만들어서 테스트 구현을 시작한다.",Aa,Q,Fa,qt=`<code class="language-dart"><span class="token comment">// test/repo/capsule_package_repo_test.dart</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">TestWidgetsFlutterBinding</span><span class="token punctuation">.</span><span class="token function">ensureInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// environment 를 test 로 설정</span>
  globals<span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">globals<span class="token punctuation">.</span></span>EnvironmentEnum</span><span class="token punctuation">.</span>test<span class="token punctuation">;</span>
  <span class="token comment">// Injectable config </span>
  <span class="token function">configureDependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Test 에서 사용할 State</span>
  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CapsulePackageData</span><span class="token punctuation">></span></span> createdPackageList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// Repo 를 초기화</span>
  late <span class="token keyword">final</span> <span class="token class-name">CapsulePackageRepo</span> capsulePackageRepo <span class="token operator">=</span> <span class="token function">getIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span></code>`,Ia,V,Zn="<code>environment</code> 를 test 로 설정한다.",ja,X,$n="test 로 설정되면 <code>FireStoreCapsulePackageRepo</code> 가 내부적으로 <code>FakeFireStore</code> 를 사용하도록 구현해놨다.",Da,Y,hn="나중에 다른 백엔드의 레포지토리를 구현할 때에도, 생성자 내부에서 환경에 따라 다른 client 를 사용하도록 할 수 있을 것이다.",qa,Z,Sa,St=`<code class="language-dart"><span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsuleRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsuleRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsuleRepo</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">final</span> <span class="token class-name">FirebaseFirestore</span> instance<span class="token punctuation">;</span>

  <span class="token class-name">FireStoreCapsuleRepo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> instance <span class="token operator">=</span> globals<span class="token punctuation">.</span>environment <span class="token operator">==</span> <span class="token class-name"><span class="token namespace">globals<span class="token punctuation">.</span></span>EnvironmentEnum</span><span class="token punctuation">.</span>prod
            <span class="token operator">?</span> <span class="token class-name">FirebaseFirestore</span><span class="token punctuation">.</span>instance
            <span class="token punctuation">:</span> <span class="token class-name">FakeFirebaseFirestore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code>`,za,Ua,Ga,$,st="create repo 테스트",Oa,h,Wa,zt=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'createCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> package <span class="token operator">=</span> <span class="token class-name">CapsulePackageData</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
      name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"TEST PACKAGE"</span></span><span class="token punctuation">,</span>
      description<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"DESCRIPTION"</span></span><span class="token punctuation">,</span>
      color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">,</span>
      userId<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"TEST USER"</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">createCapsulePackage</span><span class="token punctuation">(</span>package<span class="token punctuation">:</span> package<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span>
        <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>packageId<span class="token punctuation">:</span> package<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> package<span class="token punctuation">)</span><span class="token punctuation">;</span>
    createdPackageList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>package<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>
</code>`,Ka,Na,Ja,ss,at="다른 메서드 구현도 테스트한다.",Qa,as,Va,Ut=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'getCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> first <span class="token operator">=</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span>
        <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>packageId<span class="token punctuation">:</span> first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'getCapsulePackageList'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>createdPackageList<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'deleteCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">deleteCapsulePackage</span><span class="token punctuation">(</span>
        packageId<span class="token punctuation">:</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    createdPackageList
        <span class="token punctuation">.</span><span class="token function">removeWhere</span><span class="token punctuation">(</span><span class="token punctuation">(</span>package<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> package<span class="token punctuation">.</span>id <span class="token operator">==</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>createdPackageList<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code>`,Xa,Ya,Za,$a,ns,nt="이렇게 테스트를 구성하면 나중에 다른 Repository 를 변경해도 테스트 코드를 수정하지 않아도 된다.",ha,ts,tt="나중에 아래와 같이 Injectable 에서 어떤 구현체를 쓸지만 바꿔주면 <strong>새 구현체가 잘 작성되었는지 테스트</strong>도 자동으로 가능하다.",sn,es,an,Gt=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:capsule_todo_app/app/repos/interfaces.dart'</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:injectable/injectable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">FireStoreCapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>

<span class="token metadata function">@Injectable</span><span class="token punctuation">(</span><span class="token operator">as</span><span class="token punctuation">:</span> <span class="token class-name">CapsulePackageRepo</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">FastAPICapsulePackageRepo</span> <span class="token keyword">implements</span> <span class="token class-name">CapsulePackageRepo</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span></code>`,nn,tn,en,pn,ln,ps,et="Eqautable",cn,ls,pt=`잊을 뻔 했는데 방금 작성된 테스트가 가능하게 해준건 <code>Equatable</code> 이라는 패키지 덕분이다.
dart 에서는 equal 메서드와 hashcode 메서드를 간단하게 만들기가 어렵다.`,on,cs,lt="이 패키지도 like 가 2,700개 가까이 되는 근본 패키지이다.",un,os,ct='<img src="https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8/2023-11-19-23-53-23.png" alt="equatable"/>',kn,us,ot="사용법",rn,ks,ut="모델로 사용하고 있는 클래스가 <code>Equatable</code> 을 상속받도록 한 다음 <code>props</code> 를 오버라이딩 해주면된다.",mn,is,kt="<code>props</code> 에 적힌 프로퍼티를 가지고 hashcode 를 만들기 때문에, 여기 적힌 프로퍼티들의 값만 동일하면 나중에 비교할 때 같은 객체로 취급된다.",Cn,rs,dn,Ot=`<code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:equatable/equatable.dart'</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CapsulePackageData</span> <span class="token keyword">extends</span> <span class="token class-name">Equatable</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>

  <span class="token metadata function">@override</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token keyword">get</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> description<span class="token punctuation">,</span> createdAt<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fn,ms,it="그럼 아래처럼 객체간 비교가 가능하게 해줘서 테스트 코드를 작성하기가 매우 편해진다.",vn,Cs,_n,Wt=`<code class="language-dart"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//...</span>
  <span class="token function">test</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'getCapsulePackage'</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">CapsulePackageData</span> first <span class="token operator">=</span> createdPackageList<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">CapsulePackageData</span> result <span class="token operator">=</span>
        <span class="token keyword">await</span> capsulePackageRepo<span class="token punctuation">.</span><span class="token function">getCapsulePackage</span><span class="token punctuation">(</span>packageId<span class="token punctuation">:</span> first<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// CapsulePackageData 끼리의 비교</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//...</span>
<span class="token punctuation">&#125;</span>
</code>`,gn,wn,Pn,bn,ds,rt="마무리",xn,fs,mt="끝!";return{c(){m=e("h1"),m.textContent=yn,vs=l(),C=e("p"),C.textContent=Rn,_s=l(),d=e("p"),d.textContent=Ln,gs=l(),f=e("p"),f.innerHTML=Hn,ws=l(),v=e("p"),v.textContent=Bn,Ps=l(),_=e("p"),_.textContent=Tn,bs=l(),g=e("p"),g.innerHTML=Mn,xs=l(),Es=e("br"),ys=l(),Rs=e("br"),Ls=l(),w=e("h1"),w.textContent=An,Hs=l(),P=e("ul"),P.innerHTML=Fn,Bs=l(),b=e("pre"),Ts=new u(!1),Ms=l(),As=e("br"),Fs=l(),x=e("h1"),x.textContent=In,Is=l(),E=e("ul"),E.innerHTML=jn,js=l(),y=e("p"),y.innerHTML=Dn,Ds=l(),qs=e("br"),Ss=l(),R=e("h1"),R.textContent=qn,zs=l(),L=e("p"),L.innerHTML=Sn,Us=l(),H=e("p"),H.innerHTML=zn,Gs=l(),Os=e("br"),Ws=l(),B=e("p"),B.textContent=Un,Ks=l(),T=e("pre"),Ns=new u(!1),Js=l(),Qs=e("br"),Vs=l(),M=e("p"),M.innerHTML=Gn,Xs=l(),A=e("pre"),Ys=new u(!1),Zs=l(),$s=e("br"),hs=l(),F=e("p"),F.textContent=On,sa=l(),I=e("pre"),aa=new u(!1),na=l(),ta=e("br"),ea=l(),j=e("p"),j.innerHTML=Wn,pa=l(),D=e("pre"),la=new u(!1),ca=l(),oa=e("br"),ua=l(),ka=e("br"),ia=l(),q=e("h1"),q.textContent=Kn,ra=l(),S=e("p"),S.innerHTML=Nn,ma=l(),z=e("pre"),Ca=new u(!1),da=l(),fa=e("br"),va=l(),U=e("p"),U.innerHTML=Jn,_a=l(),G=e("pre"),ga=new u(!1),wa=l(),Pa=e("br"),ba=l(),O=e("p"),O.innerHTML=Qn,xa=l(),W=e("pre"),Ea=new u(!1),ya=l(),Ra=e("br"),La=l(),Ha=e("br"),Ba=l(),K=e("h1"),K.textContent=Vn,Ta=l(),N=e("p"),N.innerHTML=Xn,Ma=l(),J=e("p"),J.innerHTML=Yn,Aa=l(),Q=e("pre"),Fa=new u(!1),Ia=l(),V=e("p"),V.innerHTML=Zn,ja=l(),X=e("p"),X.innerHTML=$n,Da=l(),Y=e("p"),Y.textContent=hn,qa=l(),Z=e("pre"),Sa=new u(!1),za=l(),Ua=e("br"),Ga=l(),$=e("p"),$.textContent=st,Oa=l(),h=e("pre"),Wa=new u(!1),Ka=l(),Na=e("br"),Ja=l(),ss=e("p"),ss.textContent=at,Qa=l(),as=e("pre"),Va=new u(!1),Xa=l(),Ya=e("br"),Za=e("br"),$a=l(),ns=e("p"),ns.textContent=nt,ha=l(),ts=e("p"),ts.innerHTML=tt,sn=l(),es=e("pre"),an=new u(!1),nn=l(),tn=e("br"),en=l(),pn=e("br"),ln=l(),ps=e("h1"),ps.textContent=et,cn=l(),ls=e("p"),ls.innerHTML=pt,on=l(),cs=e("p"),cs.textContent=lt,un=l(),os=e("p"),os.innerHTML=ct,kn=l(),us=e("h3"),us.textContent=ot,rn=l(),ks=e("p"),ks.innerHTML=ut,mn=l(),is=e("p"),is.innerHTML=kt,Cn=l(),rs=e("pre"),dn=new u(!1),fn=l(),ms=e("p"),ms.textContent=it,vn=l(),Cs=e("pre"),_n=new u(!1),gn=l(),wn=e("br"),Pn=e("br"),bn=l(),ds=e("h1"),ds.textContent=rt,xn=l(),fs=e("p"),fs.textContent=mt,this.h()},l(s){m=p(s,"H1",{"data-svelte-h":!0}),o(m)!=="svelte-1ls67hg"&&(m.textContent=yn),vs=c(s),C=p(s,"P",{"data-svelte-h":!0}),o(C)!=="svelte-kka6c8"&&(C.textContent=Rn),_s=c(s),d=p(s,"P",{"data-svelte-h":!0}),o(d)!=="svelte-1ihjguo"&&(d.textContent=Ln),gs=c(s),f=p(s,"P",{"data-svelte-h":!0}),o(f)!=="svelte-gwrt9i"&&(f.innerHTML=Hn),ws=c(s),v=p(s,"P",{"data-svelte-h":!0}),o(v)!=="svelte-1930b79"&&(v.textContent=Bn),Ps=c(s),_=p(s,"P",{"data-svelte-h":!0}),o(_)!=="svelte-ky4xqf"&&(_.textContent=Tn),bs=c(s),g=p(s,"P",{"data-svelte-h":!0}),o(g)!=="svelte-1tz8l27"&&(g.innerHTML=Mn),xs=c(s),Es=p(s,"BR",{}),ys=c(s),Rs=p(s,"BR",{}),Ls=c(s),w=p(s,"H1",{"data-svelte-h":!0}),o(w)!=="svelte-plwwnb"&&(w.textContent=An),Hs=c(s),P=p(s,"UL",{"data-svelte-h":!0}),o(P)!=="svelte-re7l0q"&&(P.innerHTML=Fn),Bs=c(s),b=p(s,"PRE",{class:!0});var n=k(b);Ts=i(n,!1),n.forEach(a),Ms=c(s),As=p(s,"BR",{}),Fs=c(s),x=p(s,"H1",{"data-svelte-h":!0}),o(x)!=="svelte-17cwu8d"&&(x.textContent=In),Is=c(s),E=p(s,"UL",{"data-svelte-h":!0}),o(E)!=="svelte-17kbztm"&&(E.innerHTML=jn),js=c(s),y=p(s,"P",{"data-svelte-h":!0}),o(y)!=="svelte-1paoc72"&&(y.innerHTML=Dn),Ds=c(s),qs=p(s,"BR",{}),Ss=c(s),R=p(s,"H1",{"data-svelte-h":!0}),o(R)!=="svelte-1koqdv5"&&(R.textContent=qn),zs=c(s),L=p(s,"P",{"data-svelte-h":!0}),o(L)!=="svelte-4q3vsv"&&(L.innerHTML=Sn),Us=c(s),H=p(s,"P",{"data-svelte-h":!0}),o(H)!=="svelte-1wpc01w"&&(H.innerHTML=zn),Gs=c(s),Os=p(s,"BR",{}),Ws=c(s),B=p(s,"P",{"data-svelte-h":!0}),o(B)!=="svelte-1ttoaj2"&&(B.textContent=Un),Ks=c(s),T=p(s,"PRE",{class:!0});var Ct=k(T);Ns=i(Ct,!1),Ct.forEach(a),Js=c(s),Qs=p(s,"BR",{}),Vs=c(s),M=p(s,"P",{"data-svelte-h":!0}),o(M)!=="svelte-uptige"&&(M.innerHTML=Gn),Xs=c(s),A=p(s,"PRE",{class:!0});var dt=k(A);Ys=i(dt,!1),dt.forEach(a),Zs=c(s),$s=p(s,"BR",{}),hs=c(s),F=p(s,"P",{"data-svelte-h":!0}),o(F)!=="svelte-xyfrfw"&&(F.textContent=On),sa=c(s),I=p(s,"PRE",{class:!0});var ft=k(I);aa=i(ft,!1),ft.forEach(a),na=c(s),ta=p(s,"BR",{}),ea=c(s),j=p(s,"P",{"data-svelte-h":!0}),o(j)!=="svelte-hwkpxw"&&(j.innerHTML=Wn),pa=c(s),D=p(s,"PRE",{class:!0});var vt=k(D);la=i(vt,!1),vt.forEach(a),ca=c(s),oa=p(s,"BR",{}),ua=c(s),ka=p(s,"BR",{}),ia=c(s),q=p(s,"H1",{"data-svelte-h":!0}),o(q)!=="svelte-x0j9nd"&&(q.textContent=Kn),ra=c(s),S=p(s,"P",{"data-svelte-h":!0}),o(S)!=="svelte-17q4mqj"&&(S.innerHTML=Nn),ma=c(s),z=p(s,"PRE",{class:!0});var _t=k(z);Ca=i(_t,!1),_t.forEach(a),da=c(s),fa=p(s,"BR",{}),va=c(s),U=p(s,"P",{"data-svelte-h":!0}),o(U)!=="svelte-1isdob5"&&(U.innerHTML=Jn),_a=c(s),G=p(s,"PRE",{class:!0});var gt=k(G);ga=i(gt,!1),gt.forEach(a),wa=c(s),Pa=p(s,"BR",{}),ba=c(s),O=p(s,"P",{"data-svelte-h":!0}),o(O)!=="svelte-1gdpu3q"&&(O.innerHTML=Qn),xa=c(s),W=p(s,"PRE",{class:!0});var wt=k(W);Ea=i(wt,!1),wt.forEach(a),ya=c(s),Ra=p(s,"BR",{}),La=c(s),Ha=p(s,"BR",{}),Ba=c(s),K=p(s,"H1",{"data-svelte-h":!0}),o(K)!=="svelte-15fyrui"&&(K.textContent=Vn),Ta=c(s),N=p(s,"P",{"data-svelte-h":!0}),o(N)!=="svelte-1twbz3z"&&(N.innerHTML=Xn),Ma=c(s),J=p(s,"P",{"data-svelte-h":!0}),o(J)!=="svelte-1lofsth"&&(J.innerHTML=Yn),Aa=c(s),Q=p(s,"PRE",{class:!0});var Pt=k(Q);Fa=i(Pt,!1),Pt.forEach(a),Ia=c(s),V=p(s,"P",{"data-svelte-h":!0}),o(V)!=="svelte-16fyypr"&&(V.innerHTML=Zn),ja=c(s),X=p(s,"P",{"data-svelte-h":!0}),o(X)!=="svelte-cpq2oi"&&(X.innerHTML=$n),Da=c(s),Y=p(s,"P",{"data-svelte-h":!0}),o(Y)!=="svelte-fbtxzx"&&(Y.textContent=hn),qa=c(s),Z=p(s,"PRE",{class:!0});var bt=k(Z);Sa=i(bt,!1),bt.forEach(a),za=c(s),Ua=p(s,"BR",{}),Ga=c(s),$=p(s,"P",{"data-svelte-h":!0}),o($)!=="svelte-1m5d6c0"&&($.textContent=st),Oa=c(s),h=p(s,"PRE",{class:!0});var xt=k(h);Wa=i(xt,!1),xt.forEach(a),Ka=c(s),Na=p(s,"BR",{}),Ja=c(s),ss=p(s,"P",{"data-svelte-h":!0}),o(ss)!=="svelte-vut832"&&(ss.textContent=at),Qa=c(s),as=p(s,"PRE",{class:!0});var Et=k(as);Va=i(Et,!1),Et.forEach(a),Xa=c(s),Ya=p(s,"BR",{}),Za=p(s,"BR",{}),$a=c(s),ns=p(s,"P",{"data-svelte-h":!0}),o(ns)!=="svelte-1v187jn"&&(ns.textContent=nt),ha=c(s),ts=p(s,"P",{"data-svelte-h":!0}),o(ts)!=="svelte-89vxm8"&&(ts.innerHTML=tt),sn=c(s),es=p(s,"PRE",{class:!0});var yt=k(es);an=i(yt,!1),yt.forEach(a),nn=c(s),tn=p(s,"BR",{}),en=c(s),pn=p(s,"BR",{}),ln=c(s),ps=p(s,"H1",{"data-svelte-h":!0}),o(ps)!=="svelte-1e19bhm"&&(ps.textContent=et),cn=c(s),ls=p(s,"P",{"data-svelte-h":!0}),o(ls)!=="svelte-7b1t17"&&(ls.innerHTML=pt),on=c(s),cs=p(s,"P",{"data-svelte-h":!0}),o(cs)!=="svelte-1b1ufc2"&&(cs.textContent=lt),un=c(s),os=p(s,"P",{"data-svelte-h":!0}),o(os)!=="svelte-7ifgxu"&&(os.innerHTML=ct),kn=c(s),us=p(s,"H3",{"data-svelte-h":!0}),o(us)!=="svelte-16a04nc"&&(us.textContent=ot),rn=c(s),ks=p(s,"P",{"data-svelte-h":!0}),o(ks)!=="svelte-h5tz3i"&&(ks.innerHTML=ut),mn=c(s),is=p(s,"P",{"data-svelte-h":!0}),o(is)!=="svelte-dppyiz"&&(is.innerHTML=kt),Cn=c(s),rs=p(s,"PRE",{class:!0});var Rt=k(rs);dn=i(Rt,!1),Rt.forEach(a),fn=c(s),ms=p(s,"P",{"data-svelte-h":!0}),o(ms)!=="svelte-i3n2qq"&&(ms.textContent=it),vn=c(s),Cs=p(s,"PRE",{class:!0});var Lt=k(Cs);_n=i(Lt,!1),Lt.forEach(a),gn=c(s),wn=p(s,"BR",{}),Pn=p(s,"BR",{}),bn=c(s),ds=p(s,"H1",{"data-svelte-h":!0}),o(ds)!=="svelte-1hmxnju"&&(ds.textContent=rt),xn=c(s),fs=p(s,"P",{"data-svelte-h":!0}),o(fs)!=="svelte-w28h4e"&&(fs.textContent=mt),this.h()},h(){Ts.a=null,r(b,"class","language-dart"),Ns.a=null,r(T,"class","language-yaml"),Ys.a=null,r(A,"class","language-dart"),aa.a=null,r(I,"class","language-shell"),la.a=null,r(D,"class","language-dart"),Ca.a=null,r(z,"class","language-dart"),ga.a=null,r(G,"class","language-dart"),Ea.a=null,r(W,"class","language-dart"),Fa.a=null,r(Q,"class","language-dart"),Sa.a=null,r(Z,"class","language-dart"),Wa.a=null,r(h,"class","language-dart"),Va.a=null,r(as,"class","language-dart"),an.a=null,r(es,"class","language-dart"),dn.a=null,r(rs,"class","language-dart"),_n.a=null,r(Cs,"class","language-dart")},m(s,n){t(s,m,n),t(s,vs,n),t(s,C,n),t(s,_s,n),t(s,d,n),t(s,gs,n),t(s,f,n),t(s,ws,n),t(s,v,n),t(s,Ps,n),t(s,_,n),t(s,bs,n),t(s,g,n),t(s,xs,n),t(s,Es,n),t(s,ys,n),t(s,Rs,n),t(s,Ls,n),t(s,w,n),t(s,Hs,n),t(s,P,n),t(s,Bs,n),t(s,b,n),Ts.m(Bt,b),t(s,Ms,n),t(s,As,n),t(s,Fs,n),t(s,x,n),t(s,Is,n),t(s,E,n),t(s,js,n),t(s,y,n),t(s,Ds,n),t(s,qs,n),t(s,Ss,n),t(s,R,n),t(s,zs,n),t(s,L,n),t(s,Us,n),t(s,H,n),t(s,Gs,n),t(s,Os,n),t(s,Ws,n),t(s,B,n),t(s,Ks,n),t(s,T,n),Ns.m(Tt,T),t(s,Js,n),t(s,Qs,n),t(s,Vs,n),t(s,M,n),t(s,Xs,n),t(s,A,n),Ys.m(Mt,A),t(s,Zs,n),t(s,$s,n),t(s,hs,n),t(s,F,n),t(s,sa,n),t(s,I,n),aa.m(At,I),t(s,na,n),t(s,ta,n),t(s,ea,n),t(s,j,n),t(s,pa,n),t(s,D,n),la.m(Ft,D),t(s,ca,n),t(s,oa,n),t(s,ua,n),t(s,ka,n),t(s,ia,n),t(s,q,n),t(s,ra,n),t(s,S,n),t(s,ma,n),t(s,z,n),Ca.m(It,z),t(s,da,n),t(s,fa,n),t(s,va,n),t(s,U,n),t(s,_a,n),t(s,G,n),ga.m(jt,G),t(s,wa,n),t(s,Pa,n),t(s,ba,n),t(s,O,n),t(s,xa,n),t(s,W,n),Ea.m(Dt,W),t(s,ya,n),t(s,Ra,n),t(s,La,n),t(s,Ha,n),t(s,Ba,n),t(s,K,n),t(s,Ta,n),t(s,N,n),t(s,Ma,n),t(s,J,n),t(s,Aa,n),t(s,Q,n),Fa.m(qt,Q),t(s,Ia,n),t(s,V,n),t(s,ja,n),t(s,X,n),t(s,Da,n),t(s,Y,n),t(s,qa,n),t(s,Z,n),Sa.m(St,Z),t(s,za,n),t(s,Ua,n),t(s,Ga,n),t(s,$,n),t(s,Oa,n),t(s,h,n),Wa.m(zt,h),t(s,Ka,n),t(s,Na,n),t(s,Ja,n),t(s,ss,n),t(s,Qa,n),t(s,as,n),Va.m(Ut,as),t(s,Xa,n),t(s,Ya,n),t(s,Za,n),t(s,$a,n),t(s,ns,n),t(s,ha,n),t(s,ts,n),t(s,sn,n),t(s,es,n),an.m(Gt,es),t(s,nn,n),t(s,tn,n),t(s,en,n),t(s,pn,n),t(s,ln,n),t(s,ps,n),t(s,cn,n),t(s,ls,n),t(s,on,n),t(s,cs,n),t(s,un,n),t(s,os,n),t(s,kn,n),t(s,us,n),t(s,rn,n),t(s,ks,n),t(s,mn,n),t(s,is,n),t(s,Cn,n),t(s,rs,n),dn.m(Ot,rs),t(s,fn,n),t(s,ms,n),t(s,vn,n),t(s,Cs,n),_n.m(Wt,Cs),t(s,gn,n),t(s,wn,n),t(s,Pn,n),t(s,bn,n),t(s,ds,n),t(s,xn,n),t(s,fs,n)},p:En,i:En,o:En,d(s){s&&(a(m),a(vs),a(C),a(_s),a(d),a(gs),a(f),a(ws),a(v),a(Ps),a(_),a(bs),a(g),a(xs),a(Es),a(ys),a(Rs),a(Ls),a(w),a(Hs),a(P),a(Bs),a(b),a(Ms),a(As),a(Fs),a(x),a(Is),a(E),a(js),a(y),a(Ds),a(qs),a(Ss),a(R),a(zs),a(L),a(Us),a(H),a(Gs),a(Os),a(Ws),a(B),a(Ks),a(T),a(Js),a(Qs),a(Vs),a(M),a(Xs),a(A),a(Zs),a($s),a(hs),a(F),a(sa),a(I),a(na),a(ta),a(ea),a(j),a(pa),a(D),a(ca),a(oa),a(ua),a(ka),a(ia),a(q),a(ra),a(S),a(ma),a(z),a(da),a(fa),a(va),a(U),a(_a),a(G),a(wa),a(Pa),a(ba),a(O),a(xa),a(W),a(ya),a(Ra),a(La),a(Ha),a(Ba),a(K),a(Ta),a(N),a(Ma),a(J),a(Aa),a(Q),a(Ia),a(V),a(ja),a(X),a(Da),a(Y),a(qa),a(Z),a(za),a(Ua),a(Ga),a($),a(Oa),a(h),a(Ka),a(Na),a(Ja),a(ss),a(Qa),a(as),a(Xa),a(Ya),a(Za),a($a),a(ns),a(ha),a(ts),a(sn),a(es),a(nn),a(tn),a(en),a(pn),a(ln),a(ps),a(cn),a(ls),a(on),a(cs),a(un),a(os),a(kn),a(us),a(rn),a(ks),a(mn),a(is),a(Cn),a(rs),a(fn),a(ms),a(vn),a(Cs),a(gn),a(wn),a(Pn),a(bn),a(ds),a(xn),a(fs))}}}const Yt={title:"Flutter 의존성 주입과 테스트",description:"개인 프로젝트에서 Flutter 로 clean 함을 적용해볼 일이 생겼다. 일단 백엔드 없이 FireStore 만 써서 진행중인데, 나중에 백엔드 확장이 될 것 같다. 먼저 필요한 기능들을 인터페이스로 만든다.",date:"2023-11-20",categories:["flutter","dart"],published:!0,thumbnail:"https://neulhan-blog.s3.ap-northeast-2.amazonaws.com/images/flutter-의존성-주입과-테스트/2023-11-19-04-13-57.png"};class Zt extends Nt{constructor(m){super(),Jt(this,m,null,Qt,Kt,{})}}export{Zt as default,Yt as metadata};
